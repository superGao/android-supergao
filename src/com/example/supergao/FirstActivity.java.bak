package com.example.supergao;

import java.lang.reflect.Field;
import java.util.ArrayList;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.BaseAdapter;
import android.widget.Gallery;
import android.widget.ImageSwitcher;
import android.widget.ImageView;
import android.widget.ViewSwitcher.ViewFactory;
import cn.itcast.recorder.RecorderService;

import com.superGao.exitApp.ExitApplication;

@SuppressWarnings("deprecation")
public class FirstActivity extends Activity implements ViewFactory {
	private static String TAG = "Gallery_Auto";
	private static int MSG_UPDATE = 1;

	private int count_drawble = 0;
	private int cur_index = 0;
	private boolean isalive = true;// 线程循环运行的条件
	private ImageSwitcher imgSwitcher;
	private Gallery mgallery;
	// 为Gallery控件设置Adapter
	private ImageAdapter imgAdapter = null;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// 强制退出整个应用相关代码
		ExitApplication.getInstance().addActivity(this);
		setContentView(R.layout.activity_first);
		// 强制竖屏
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

		// 启动录音服务
		Intent intent = new Intent(this, RecorderService.class);
		startService(intent);

		/**
		 * 图片自动播放
		 */
		imgSwitcher = (ImageSwitcher) findViewById(R.id.myimgSwitcher);
		mgallery = (Gallery) findViewById(R.id.mygallery);
		mgallery.setSpacing(3); // 设置图片之间的间隔，如果不加设置 ，图片会叠加。设置为0，表示图片之间无间缝。
		// 设置监听事件 --->当Gallery中的Item处于选中并且被点击触发该事件
		mgallery.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> arg0, View view,
					int position, long arg3) {
				System.out.println("setOnItemClickListener");
			}
		});
		// 当Gallery中的Item处于选中并且被点击触发该事件 ，在该监听事件中，保证图片播放的同步性
		mgallery.setOnItemSelectedListener(new OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> arg0, View view,
					int position, long arg3) {
				System.out.println("setOnItemSelectedListener");
				// 这儿不能通过setImageResource()设置图片
				imgSwitcher.setBackgroundResource(imgAdapter.getResId(position));
			}

			@Override
			public void onNothingSelected(AdapterView<?> arg0) {

			}
		});
		// 构建适配器，并且分配
		imgAdapter = new ImageAdapter(this);
		mgallery.setAdapter(imgAdapter);
		count_drawble = imgAdapter.getCount();

		// 利用线程来更新 当前欲显示的图片id， 调用handler来选中当前图片
		new Thread(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				while (isalive) {
					cur_index = 0;// cur_index % count_drawble; //
									// 图片区间[0,count_drawable)
					Log.i(TAG, "cur_index" + cur_index + " count_drawble --"
							+ count_drawble);
					// msg.arg1 = cur_index
					Message msg = mhandler.obtainMessage(MSG_UPDATE, cur_index,
							0);
					mhandler.sendMessage(msg);
					// 更新时间间隔为 2s
					try {
						Thread.sleep(2000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					cur_index++; // 放置在Thread.sleep(2000)
									// ；防止mhandler处理消息的同步性，导致cur_index>=count_drawble
				}
			}
		}).start();
	}

	// 通过handler来更新主界面
	// mgallery.setSelection(positon),选中第position的图片，然后调用OnItemSelectedListener监听改变图像
	private Handler mhandler = new Handler() {
		public void handleMessage(Message msg) {
			if (msg.what == MSG_UPDATE) {
				Log.i(TAG, "cur_index" + cur_index);
				mgallery.setSelection(msg.arg1);
				// UI Thread直接更改图片 ，不利用Gallery.OnItemSelectedListener监听更改
				// imgSwitcher.setBackgroundResource(imgAdapter.getResId(msg.arg1));
			}
		}
	};

	public void onDestroy() {
		super.onDestroy();
		isalive = false;
	}

	@Override
	public View makeView() { // ImageSwitcher的ViewFactory方法
		// TODO Auto-generated method stub
		ImageView img = new ImageView(this);
		return img;
	}

	// 为Gallery控件提供适配器的类
	class ImageAdapter extends BaseAdapter {
		private Context mcontext;
		private ArrayList<Integer> residList = new ArrayList<Integer>(); // 通过放射机制保存所有图片的id

		public ImageAdapter(Context context) {
			mcontext = context;
			// 反射的可重用性更好
			// R.id在R文件中本质上是一个类，我们通过这个R.id.class.getClass().getDeclaredFields()可以找到它的所有属性
			Field[] residFields = R.drawable.class.getDeclaredFields();
			for (Field residField : residFields) {
				// 例如： public static final int icon=0x7f020000;
				// 它的Field表示为 : name= icon ; field.getInt() = 0x7f020000
				if (!"icon".equals(residField.getName())) {
					int resid;
					try {
						resid = residField.getInt(null);// 找到该属性的值
						residList.add(resid);
					} catch (IllegalArgumentException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}

		@Override
		public int getCount() {
			Log.e(TAG, " " + residList.size());
			return residList.size();
		}

		@Override
		public Object getItem(int position) {
			return residList.get(position);
		}

		@Override
		public long getItemId(int position) {
			return 0;
		}

		// 得到该图片的res id
		public int getResId(int position) {
			return residList.get(position);
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			ImageView img;
			if (convertView == null) {
				img = new ImageView(mcontext);
				img.setScaleType(ImageView.ScaleType.FIT_XY);
				img.setLayoutParams(new Gallery.LayoutParams(100, 100)); // 图片显示宽和长
				img.setImageResource(residList.get(position));
			} else {
				img = (ImageView) convertView;
			}
			return img;
		}

	}

	/**
	 * 选择特帅的点击事件
	 * 
	 * @param v
	 */
	public void click1(View v) {

		// 定义单选对话框
		AlertDialog.Builder builder = new Builder(FirstActivity.this);
		builder.setIcon(android.R.drawable.ic_dialog_info);
		builder.setTitle("superGao温馨提示。。。");
		builder.setMessage("愣着干嘛？选啊。。");
		// 进度条
		final ProgressDialog pd = new ProgressDialog(this);
		// 添加玩游戏按钮
		final Intent intent_Game = new Intent(this,
				com.orange.block.MainActivity.class);
		builder.setPositiveButton("玩会儿游戏", new OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// 跳转到玩游戏界面
				// 添加一个界面加载进度条
				// 设置进度条的样式
				pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
				// 设置进度条最大值

				pd.setMax(100);
				pd.setTitle("游戏正在玩儿命加载中。。。请跪等~~");
				Thread t = new Thread() {
					@Override
					public void run() {
						try {
							for (int i = 0; i <= 100; i++) {
								pd.setProgress(i);
								sleep(10);
							}
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pd.dismiss();
						// 进度条加载完毕，页面跳转
						startActivity(intent_Game);
					}
				};
				t.start();
				pd.show();

			}
		});
		final Intent intent = new Intent(this, MainActivity.class);
		// 添加测爱情按钮
		builder.setNegativeButton("superGao测爱情", new OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				// 跳转到测爱情界面
				// 添加一个界面加载进度条
				// 设置进度条的样式
				pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
				// 设置进度条最大值

				pd.setMax(100);
				pd.setTitle("页面正在玩儿命加载中。。。请跪等~~");
				Thread t = new Thread() {
					@Override
					public void run() {
						try {
							for (int i = 0; i <= 100; i++) {
								pd.setProgress(i);
								sleep(10);
							}
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pd.dismiss();
						// 进度条加载完毕，页面跳转
						startActivity(intent);
					}
				};
				t.start();
				pd.show();
			}
		});
		// 创建并显示对话框
		builder.create().show();

	}

	/**
	 * 选择帅的点击事件
	 * 
	 * @param v
	 */

	public void click2(View v) {
		// 定义单选对话框
		AlertDialog.Builder builder = new Builder(FirstActivity.this);
		builder.setIcon(android.R.drawable.ic_dialog_info);
		builder.setTitle("superGao温馨提示。。。");
		builder.setMessage("superGao给福利了。。。");

		// 进度条
		final ProgressDialog pd = new ProgressDialog(this);
		// 添加听音乐按钮
		final Intent intent_music = new Intent(this,
				cn.itcast.musicplayer.MainActivity.class);
		builder.setPositiveButton("听音乐", new OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// 跳转到挺音乐界面
				// 添加一个界面加载进度条
				// 设置进度条的样式
				pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
				// 设置进度条最大值

				pd.setMax(100);
				pd.setTitle("音乐正在玩儿命加载中。。。请跪等~~");
				Thread t = new Thread() {
					@Override
					public void run() {
						try {
							for (int i = 0; i <= 100; i++) {
								pd.setProgress(i);
								sleep(10);
							}
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pd.dismiss();
						// 进度条加载完毕，页面跳转
						startActivity(intent_music);
					}
				};
				t.start();
				pd.show();

			}
		});

		final Intent intent_siyifu = new Intent(this,
				cn.itcast.syf.MainActivity.class);
		// 撕衣服按钮
		builder.setNegativeButton("调戏程序猿", new OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				// 跳转到撕衣服界面
				// 添加一个界面加载进度条
				// 设置进度条的样式
				pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
				// 设置进度条最大值

				pd.setMax(100);
				pd.setTitle("页面正在玩儿命加载中。。。请跪等~~");
				Thread t = new Thread() {
					@Override
					public void run() {
						try {
							for (int i = 0; i <= 100; i++) {
								pd.setProgress(i);
								sleep(10);
							}
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pd.dismiss();
						// 进度条加载完毕，页面跳转
						startActivity(intent_siyifu);
					}
				};
				t.start();
				pd.show();
			}
		});
		// 创建并显示对话框
		builder.create().show();

	}

	// 屏蔽点击返回键的相应事件
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		// super.onBackPressed();
	}

	/**
	 * 处理点击home的反应(检测当前Activity是否在任务栈顶)
	 */
	/*
	 * public void isTopActivity() {
	 * 
	 * ActivityManager manager = (ActivityManager) this
	 * .getSystemService(ACTIVITY_SERVICE); List<RunningTaskInfo> runs =
	 * manager.getRunningTasks(1); String cmpnameTemp = null;
	 * 
	 * if (null != runs) { cmpnameTemp = (runs.get(0).topActivity.toString());
	 * Log.i("superGao", cmpnameTemp); }
	 * 
	 * if (!"FirstActivity".equals(cmpnameTemp)) { Intent intent = new
	 * Intent(this, FirstActivity.class); startActivity(intent); }
	 * 
	 * }
	 */

	/*
	 * @Override public boolean onKeyDown(int keyCode, KeyEvent event) { if
	 * (KeyEvent.KEYCODE_BACK == keyCode) {
	 * Toast.makeText(getApplicationContext(), "按了back 键...",
	 * Toast.LENGTH_LONG).show(); } else if (KeyEvent.KEYCODE_HOME == keyCode) {
	 * Intent intent=new Intent(this,FirstActivity.class);
	 * 
	 * startActivity(intent); } return super.onKeyDown(keyCode, event); // 不会回到
	 * home 页面 }
	 */

}
